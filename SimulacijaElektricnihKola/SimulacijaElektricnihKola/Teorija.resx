<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rtbTeorija.Text" xml:space="preserve">
    <value>JEDNOSMERNA STRUJA

Jednosmerna struja je fizička pojava protoka električnog naelektrisanja od višeg ka nižem potencijalu i nepromenljivog je smera.
Jačina struje koja protiče kroz otpornik jednaka je kolinčniku napona i otpornosti otpornika.

                    I = U / R                                              

Ova jednačina predstavlja osnovni oblik Omovog zakona i važi za linearne otpornike. Iz jednačine (1) dobija se sledeći odnos jedinica:

                    1 A = 1 V / 1 Ω     

Primer:
Kroz otpornik otpornosti od 10 Ω teče struja od 0,5A. Koliki je napon na otporniku? Prema jednačini 3 se dobija: 

U = R * I = 10Ω· 0,5A =5V

PRVI KIRHOFOV ZAKON

Kod  složenih električnih kola se često dešava da se više provodnika spajaju u istoj tački. Takva tačka u kojoj se spajaju tri ili više provodnika naziva se čvor.
Zbir struja koje imaju smer ka čvoru jednak je zbiru struja koje imaju smer od čvora. To jest, algebarski zbir jačina struja koje se sustižu u jednom čvoru (utiču i ističu iz njega), jednak je nuli.
Pri izradi zadataka uzima se da je smer struje od čvora pozitivan, a ka čvoru negativan.

DRUGI KIRHOFOV ZAKON

 Ovaj zakon odnosi se na konture složenog kola. Ovaj zakon povezuje sve elektromotorne sile i napone na otpornicima jedne konture. 
Za kolo na slici (1) se mogu napisati jednačine za konture po drugom Kirhofovom zakonu. U složenim kolima prilikom obilaženja jednog zatvorenog puta obično postoji više struja. 
Jedan deo ovog zatvorenog puta je zajednički sa ostalim zatvorenim putevima, a jedan deo može da bude izdvojen od ostalih zatvorenih puteva.
Ovakav zatvoren put se naziva kontura. U prvom delu kola je naznačen smer obilaženja i označen sa I. 
Za ovu zatvorenu konturu treba napisati drugi Kirhofov zakon menjajući sledeća pravila: polazi se iz jedne tačke, ide se u smeru označenom kao smer obilaženja, pišu se sve električne sile i dođe se u istu tačku; pri tome se uz elektromotornu silu piše znak + ako ona deluje u smeru struje (prolazi se kroz nju od njenog negativnog ka pozitivnom kraju).
Elektromotorna sila se uzima sa znakom – ako deluje nasuprot struje odnosno ako se kroz nju prolazi od + ka - .

1. Za prvu konturu na slici (1) drugi Kirhofov zakon ima sledeći oblik  (polazeći iz tačke a i vraćajući se obilazeći ponovo u nju):

               E1 - R1 * I1 – R2 * I2 = 0   

2. Za drugu konturu ( označenu sa II) drugi Kirhofov zakon ima sledeći oblik ( polazeći iz tačke b i vraćajući se obilaženjem konture ponovo u nju):

               R3 * I3 + E2 – R2 * I2 = 0

3. Za treći put ( označen sa III) može se takođe napisati drugi Kirhofov zakon polazeći iz tačka:

               E1 - R1 * I1 - E2 - R3 * I3 = 0 

Iz navedenih relacija može se izvesti obrazac za drugi Kirhofov zakon za složeno kolo koji glasi: Algebarski zbir svih elektromotornih sila u jednoj konturi složenog kola jednak je algebarskom zbiru napona na svim otpornicima te konture.</value>
  </data>
</root>